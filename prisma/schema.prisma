// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  admin     Boolean  @default(false)
  name      String?
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups                   Group[]                   @relation("GroupUsers")
  ownedGroups              Group[]
  questionRequestTemplates QuestionRequestTemplate[]
  questionRequests         QuestionRequest[]
  answers                  Answer[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId Int
  owner   User   @relation(fields: [ownerId], references: [id])
  users   User[] @relation("GroupUsers")
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionRequestTemplate {
  id             Int      @id @default(autoincrement())
  name           String
  promptTemplate String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  /// [QuestionRequestTemplateParameter]
  parameters     Json[]
  ownerId        Int

  owner User @relation(fields: [ownerId], references: [id])

  requests QuestionRequest[]
}

model QuestionRequest {
  id              Int      @id @default(autoincrement())
  /// [QuestionRequestParameterValue]
  parameterValues Json[]
  createdAt       DateTime @default(now())

  templateId Int
  userId     Int

  user      User                     @relation(fields: [userId], references: [id])
  template  QuestionRequestTemplate? @relation(fields: [templateId], references: [id])
  questions Question[]
}

model Question {
  id                 Int    @id @default(autoincrement())
  content            String
  correctAnswerIndex Int
  /// [MultipleChoiceQuestionAlternative]
  alternatives       Json[]

  requestId Int
  request   QuestionRequest @relation(fields: [requestId], references: [id])

  answers Answer[]
}

model Answer {
  id         Int @id @default(autoincrement())
  questionId Int
  userId     Int

  answerIndex     Int
  correct         Boolean
  confidenceLevel Int
  createdAt       DateTime @default(now())

  flaggedIncorrect   Boolean @default(false)
  flaggedProblematic Boolean @default(false)
  flaggedExcellent   Boolean @default(false)
  observation        String  @default("")

  question Question @relation(fields: [questionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId, questionId], name: "user_question_unique")
}
